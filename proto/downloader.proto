syntax = "proto3";

// import "google/protobuf/timestamp.proto";
// import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

option go_package = ".;proto";

service DownloadService {
  rpc Init(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc Shutdown(google.protobuf.Empty) returns (google.protobuf.Empty) {}


  rpc GetVideoInfo(VideoInfoRequest) returns (VideoInfoResponse) {}

  rpc ParseEpisodes(ParseRequest) returns (ParseResponse) {}

  rpc Download(DownloadRequest) returns (stream DownloadProgress) {}

  rpc StopDownload(StopDownloadRequest) returns (StopDownloadResponse) {}
}

// ---------------------------- Requests ----------------------------

message VideoInfoRequest {
  string url = 1; // The URL to fetch information from.
}

message ParseRequest {
  string id = 1; // Unique identifier for the download job.
  repeated Task tasks = 2; 
}

message DownloadRequest {
  string id = 1; // Unique identifier for the download job.
  repeated Task tasks = 2; 
}

message StopDownloadRequest {
  string id = 1; // Unique identifier for the download job.
}

// ---------------------------- Responses ----------------------------

message VideoInfoResponse {
  string title = 1;                     // Title of the content.
  string cover = 2;                     // Cover image URL.
  string author = 3;                    // Author of the content.
  repeated Task tasks = 4; 
}

message DownloadProgress {
  string id = 1;               
  int64 bytes_transferred = 2; // Number of bytes transferred.
  int64 total_bytes = 3;       // Total number of bytes to be transferred.
  string speed = 4;            // Current download speed.
}

message ParseResponse {
  string id = 1; 
  repeated Task tasks = 2; 
}

// Response for stopping a download.
message StopDownloadResponse {
  string id = 1;   
  string state = 2; // State of the download after stopping.
}

// ---------------------------- Models ----------------------------
// 下载任务
message Task {
  string id = 1;
  string url = 2;
  string session_id = 3;
  string title = 4;
  repeated Segment segments = 5;
}

message Segment {
  string mime_type = 2;
  repeated Format formats = 3;
}

message Format {
  string id = 1;   
  int64 fid = 2;        //  format Identifier.
  string mime_type =3;  // MIME type of the format.
  string label = 4;     // Media label (e.g., "720p").
  string code = 5;      //  (e.g., "mp4/mov","flac/mp3","png/jpg").
  string url = 6;       // URL for downloading this format.
}

